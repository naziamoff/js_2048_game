{"version":3,"sources":["scripts/main.js"],"names":["cells","document","querySelectorAll","rows","rowCells","map","row","columns","r","c","push","children","startButton","querySelector","startMessage","loseMessage","winMessage","score","randomCellValues","Array","fill","emptyCells","started","rotated","fillRandomCell","length","randomizeIndex","arr","Math","floor","random","randomCell","randomValue","classList","innerText","splice","indexOf","start","style","restart","add","forEach","cell","className","move","direction","checkMergePossibility","remove","moveRight","moveLeft","moveUp","moveDown","removeAttribute","columnsAndRows","group","i","rotateCells","reverse","canMove","includes","canMerge","dataset","blocked","merge","rotate","removeItem","item","current","prev","value","addEventListener","e","key","preventDefault"],"mappings":"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","file":"main.515e67cd.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = [...document.querySelectorAll('.field-row')];\nconst rowCells = rows.map((row) => [...row.querySelectorAll('.field-cell')]);\nconst columns = [[], [], [], []];\n\nfor (let r = 0; r < 4; r++) {\n  for (let c = 0; c < 4; c++) {\n    columns[c].push(rows[r].children[c]);\n  }\n}\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\n// generating values for randomizer below, '4' chance is 10%\nconst randomCellValues = new Array(10).fill(2, 0, 9).fill(4, 9);\nlet emptyCells = [...cells];\nlet started = false;\nlet rotated = false;\n\nfunction fillRandomCell() {\n  if (!emptyCells.length) {\n    return;\n  }\n\n  const randomizeIndex = (arr) => Math.floor(Math.random() * arr.length);\n  const randomCell = emptyCells[randomizeIndex(emptyCells)];\n  const randomValue = randomCellValues[randomizeIndex(randomCellValues)];\n\n  randomCell.classList = (`field-cell field-cell--${randomValue}`);\n  randomCell.innerText = randomValue;\n\n  emptyCells.splice(emptyCells.indexOf(randomCell), 1);\n}\n\nconst start = () => {\n  startMessage.style = 'display: none;';\n  startButton.classList = 'button restart';\n  startButton.innerText = 'Restart';\n\n  fillRandomCell();\n  fillRandomCell();\n  started = true;\n};\n\nconst restart = () => {\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  emptyCells = [...cells];\n  score.innerText = 0;\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n\n  fillRandomCell();\n  fillRandomCell();\n};\n\nfunction move(direction) {\n  if (!emptyCells.length && !checkMergePossibility()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  switch (direction) {\n    case 'ArrowRight':\n      moveRight();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  cells.forEach(cell => {\n    cell.removeAttribute('data-blocked');\n  });\n}\n\nfunction checkMergePossibility() {\n  const columnsAndRows = [...rowCells, ...columns];\n\n  for (const group of columnsAndRows) {\n    for (let i = 0; i < 3; i++) {\n      if (group[i].innerText === group[i + 1].innerText) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  for (const row of rowCells) {\n    rotateCells(row);\n  }\n}\n\nfunction moveLeft() {\n  for (const row of rowCells) {\n    rotateCells([...row].reverse());\n  }\n}\n\nfunction moveUp() {\n  for (const column of columns) {\n    rotateCells([...column].reverse());\n  }\n}\n\nfunction moveDown() {\n  for (const column of columns) {\n    rotateCells(column);\n  }\n}\n\nfunction rotateCells(group) {\n  for (let i = 3; i > 0; i--) {\n    const canMove = emptyCells.includes(group[i])\n      && !emptyCells.includes(group[i - 1]);\n\n    const canMerge = group[i].innerText === group[i - 1].innerText\n      && group[i].innerText.length\n      && !group[i - 1].dataset.blocked;\n\n    if ((canMerge || canMove) && !rotated) {\n      rotated = true;\n    }\n\n    if (canMerge) {\n      merge(group[i], group[i - 1]);\n      rotateCells(group);\n    }\n\n    if (canMove) {\n      rotate(group[i], group[i - 1]);\n      rotateCells(group);\n    }\n  }\n}\n\nfunction removeItem(item) {\n  item.innerText = '';\n  item.className = 'field-cell';\n  emptyCells.push(item);\n}\n\nfunction rotate(current, prev) {\n  current.innerText = prev.innerText;\n  current.className = prev.className;\n  emptyCells.splice(emptyCells.indexOf(current), 1);\n  removeItem(prev);\n}\n\nfunction merge(current, prev) {\n  const value = current.innerText * 2;\n\n  current.innerText = value;\n  current.className = `field-cell field-cell--${value}`;\n  score.innerText = +score.innerText + value;\n  removeItem(prev);\n\n  current.dataset.blocked = true;\n  prev.dataset.blocked = true;\n\n  if (value === 2048) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n  if (arrowKeys.includes(e.key)) {\n    e.preventDefault();\n    move(e.key);\n\n    if (rotated) {\n      fillRandomCell();\n      rotated = false;\n    }\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (!started) {\n    start();\n  } else {\n    restart();\n  }\n});\n"]}